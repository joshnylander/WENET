<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>JAWJS</display-name>
	<filter>
		<description>This wraps the ServletRequest object in a WENETRequest object.</description>
		<display-name>wrapasWENETRequest</display-name>
		<filter-name>wrapasWENETRequest</filter-name>
		<filter-class>us.wenet.jawjs.server.FilterWrapAsWENETrequest</filter-class>
	</filter>
	<filter>
		<description>Filter requests and and generate WENETPincipal from parameter lists</description>
		<display-name>FilterSSLAuthenticatorUserParameter</display-name>
		<filter-name>FilterSSLAuthenticatorUserParameter</filter-name>
		<filter-class>us.wenet.jawjs.server.file.FilterSSLAuthenticatorUserParameter</filter-class>
		<init-param>
			<description>
			Password for trust store.</description>
			<param-name>clientTruststorePassword</param-name>
			<param-value>to set</param-value>
		</init-param>
		<init-param>
			<description>
			Location of truststore jks.</description>
			<param-name>clientTruststore</param-name>
			<param-value>truststore.jks</param-value>
		</init-param>
		<init-param>
			<description>
			Semicolon seperated list of valid users.</description>
			<param-name>validUsers</param-name>
			<param-value>josh@nylanderfamily.org;jnylander@cob.org</param-value>
		</init-param>
		<init-param>
			<description>
			Semicolon seperated list of roles to add to each user.</description>
			<param-name>userRoles</param-name>
			<param-value>role1;role2</param-value>
		</init-param>
	</filter>
	<filter>
		<description>This filter take a path and roles required and forwards the request/response to the path if the user has any one of the required roles.</description>
		<display-name>FilterPathChooserByRole</display-name>
		<filter-name>FilterPathChooserByRole</filter-name>
		<filter-class>us.wenet.jawjs.server.FilterForwardByRole</filter-class>
		<init-param>
			<description>
			The relative path to forward to if user has role(s).</description>
			<param-name>resource</param-name>
			<param-value></param-value>
		</init-param>
		<init-param>
			<description>A semi-colon seperated list of role names that this filter should forward based on.</description>
			<param-name>role-names</param-name>
			<param-value></param-value>
		</init-param>
	</filter>
	<filter>
		<description>This filter will log each request to a new XML file.</description>
		<display-name>FilterFileLogger</display-name>
		<filter-name>FilterFileLogger</filter-name>
		<filter-class>us.wenet.jawjs.server.file.FilterLogger</filter-class>
		<init-param>
			<description>Directory to store log files in</description>
			<param-name>file-path</param-name>
			<param-value>TODO</param-value>
		</init-param>
		<init-param>
			<description>true/false to include XML header at top of file</description>
			<param-name>includeXMLHeader</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter>
		<description>This filter will control access to the filtered path by role.</description>
		<display-name>FilterAccessByRole</display-name>
		<filter-name>FilterAccessByRole</filter-name>
		<filter-class>us.wenet.jawjs.server.FilterAccessByRole</filter-class>
		<init-param>
			<description>
			A semi-colin seperated list of role names to check against.</description>
			<param-name>role-names</param-name>
			<param-value></param-value>
		</init-param>
	</filter>
	<servlet>
		<description>A simple servlet to return an XML file at the mapped request.</description>
		<display-name>ServletXMLFile</display-name>
		<servlet-name>ServletXMLFile</servlet-name>
		<servlet-class>us.wenet.jawjs.server.xslt.ServletXMLFile</servlet-class>
		<init-param>
			<description>File to return with this filter.</description>
			<param-name>path-xml</param-name>
			<param-value>TODO</param-value>
		</init-param>
	</servlet>

	<!-- Begin Quartz Scheduler -->
	<context-param>
		<param-name>config-file</param-name>
		<param-value>global_quartz.properties</param-value>
	</context-param>
	<context-param>
		<param-name>shutdown-on-unload</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>start-scheduler-on-load</param-name>
		<param-value>true</param-value>
	</context-param>
	<listener>
		<listener-class>org.quartz.ee.servlet.QuartzInitializerListener</listener-class>
	</listener>
	<!-- End Quartz Scheduler -->
	
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>
