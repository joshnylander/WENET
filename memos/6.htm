<?xml version="1.0" encoding="iso-8859-1"?> <%@include file="/common/utils.jsp"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- DW6 -->

   <head>
   
   <title>WENET Memo 6</title>
   
<link rel="stylesheet" href="/styles/masterstyle_fonts.css" type="text/css" />
      </head>
   <body bgcolor="#ffffff" topmargin="0" leftmargin="0" marginheight="0" marginwidth="0" >
   
  <table width="100%" border="0" cellspacing="1">
    <tr valign="top">
      <td colspan="2" width="64%"><font size="-1">WENET Working Group,<br />
MIS Committee,<br />
Whatcom County Law and Justice Council</font></td>
      <td width="33%" rowspan="3" align="right"><font size="-1"><font size="-1">R.
      Josh Nylander</font></font></td>
    </tr>
    <tr valign="top">
      <td width="33%"><font size="-1">Memo: 6</font></td>
      <td width="33%">&nbsp;</td>
    </tr>
    <tr valign="top">
      <td><font size="-1">Status: DRAFT </font></td>
      <td>&nbsp;</td>
    </tr>
    <tr valign="top">
      <td width="33%"><font size="-1">Obsoletes: Memo
            4, WENET Protocol v1</font></td>
      <td width="33%">&nbsp;</td>
      <td width="33%"><div align="right"><font size="-1">June
      1st, 2004</font></div></td>
    </tr>
    <tr valign="top">
      <td colspan="3" width="100%"><div align="center"><strong>WENET
      Protocol v1.1</strong></div></td>
    </tr>
  </table>
  
  <p>Status of this Memo</p>
  <blockquote>
    <p>This document specifies part of the WENET project standard. Distribution
      of this document is unlimited.</p>
  </blockquote>
  <p>Copyright Notice</p>
  <blockquote>
    <p>This document is released as a government work into the public domain.</p>
  </blockquote>
  <p>Abstract</p>
  <blockquote>
    <p>This document specifies a standard method for querying systems participating
      in the WENET project. The WENET project shares law and justice data from
      local, state, and federal law enforcement and justice agencies in a common
      XML format. This document defines a method using HTTP over TLS to request
      data in XML form from data systems participating in the WENET project.</p>
  </blockquote>
  <p>Table of Contents</p>
  <ol>
    <li><a href="#introduction">Introduction</a>
        <ol>
          <li><a href="#terminology">Requirements Terminology</a></li>
        </ol>
    </li>
    <li><a href="#clientservice">Client / Service Model</a></li>
    <li><a href="#uri">URIs</a></li>
    <li><a href="#http">HTTP</a>
        <ol>
          <li><a href="#securehttp">Secure HTTP</a></li>
          <li><a href="#httpget">HTTP GET</a></li>
          <li><a href="#httppost">HTTP POST</a></li>
          <li><a href="#httperror">HTTP Error Messages</a></li>
          <li><a href="#methods">Methods</a></li>
        </ol>
    </li>
    <li><a href="#schema">WENET Schema</a></li>
    <li><a href="#discovery">Discovery</a>
      <ol>
        <li><a href="#clusters">Clusters</a>
          <ol>
            <li><a href="#hierarchy">Service Hierarchy</a></li>
          </ol>
        </li>
        <li><a href="#service"><em>wenet:service</em></a></li>
      </ol>
    </li>
    <li><a href="#security">Security</a>
      <ol>
        <li><a href="#authentication">Authentication</a></li>
        <li><a href="#authorization">Authorization</a></li>
        <li><a href="#auditing">Auditing</a></li>
      </ol>
    </li>
    <li><a href="#query">Query</a><ol><li><em><a href="#instance">wenet:instance</a></em></li>
      <li><a href="#results">wenet:resutls</a></li>
      <li><a href="#simple">Simple</a></li>
      <li><a href="#complex">Complex</a>
        <ol>
          <li><a href="#xpath">XPath</a></li>
          <li><a href="#xquery">XQuery</a></li>
        </ol>
      </li>
      </ol></li>
      <li><a href="#changelog">Change Log</a></li>
  </ol>
  <p>1. Introduction<a name="introduction" id="introduction"></a></p>
  <blockquote>
    <p>The WENET project has one goal. To design and deploy a computerized process
      that allows the sharing and/or exchanging of information between all law
      and justice practitioners, within the county&#8217;s justice enterprise,
      that tracks offenders from the moment they enter the system until re-integrated
      back into the community. To that end, the WENET Working Group specifies
      a standard way to inquire disparate law and justice data systems. These
      data systems, called record management systems (RMS), are built on a variety
      of platforms with a variety of technologies. At their core they all to
      one extent or another contain data about persons, places, things, and events
      involved in the law and justice process. This standard inquire method,
      along with its companion schema document, define both a common data format
      for exchange and a standard process to authenticate, inquire, and
      retrieve commonly formatted data. This document builds on the concepts
      in the November 2002 report by the MIS committee of the Whatcom County
      Law and Justice Council entitled &quot;<a href="http://www.whatcomcounty.us/boards/lawjustice/pdf/mis_nov2002_report.pdf">Data
      Integration &amp; The Criminal Justice System in Whatcom County </a>&quot;.
      This document also builds on the presentation given July 10th of 2003 in
      Bellingham to project members and vendors (<a href="http://www.whatcomcounty.us/apps/wenet/wenet_technical_plan-part_1.ppt">Power
      Point portion of presentation is available</a>). However in some instances
      it has been necessary to deviate from both the report and the presentation.</p>
    <p>Specifically, this protocol specifies methods to inquire an agency RMS
      to <a href="#query">retrieve</a> both a <a href="#results">list</a> of
      document instances that contain the requested information and the <a href="#instance">instances</a> themselves.
      Additionally, methods are specified for <a href="#discovery">discovery</a>, <a href="#authorization">authorization</a>, <a href="#authentication">authentication</a> and <a href="#auditing">auditing</a>.</p>
  </blockquote>
  <p>1.1. Requirements Terminology<a name="terminology" id="terminology"></a></p>
  <blockquote>
    <p> Keywords &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHOULD&quot;, &quot;SHOULD
      NOT&quot; and &quot;MAY&quot; that appear in this document are to be interpreted
      as described in [<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>].</p>
  </blockquote>
  <p>2. Client / Service Model<a name="clientservice" id="clientservice"></a></p>
  <blockquote>
    <p>For the purpose of this protocol the term &quot;client&quot; refers to
      an application, typically used by a person (&quot;user&quot;) that inquires
      a &quot;service&quot;. A &quot;service&quot; is an implementation of this
      protocol for a single records management system (RMS). Clients typically
      makes requests and services typically provide a response. A single agency
      may provide multiple services. It is expected that a client will simultanesly
      inquire against multiple services in order to compile the complete data
      set. Both services and clients may exist on the same or different hosts
      but must
      be able
      to
      communicate
      via TCP/IP
      to
      the requested services. A service MAY act as both a service and a client.
      For example, a service could proxy requests from a client, taking the request
      and passing it to other services and responding to the client with combined
      results.</p>
  </blockquote>
  <p>3. URIs<a name="uri" id="uri"></a></p>
  <blockquote>
    <p>This protocol uses Uniform Resource Identifiers as specified by the IETF
      [<a href="ftp://ftp.rfc-editor.org/in-notes/rfc2396.txt">RFC 2396</a>]
      for both URLs and for URNs [<a href="ftp://ftp.rfc-editor.org/in-notes/rfc2141.txt">RFC
      2141</a>]. URLs are used by this protocol to specify the technology (often
      called protocol), the host, and the name of methods and data sources exposed
      by services implementing this protocol. An example of a URL used to identify
      the discovery method would be &quot;http://wenet.co.whatcom.wa.us/as400/discovery.jsp&quot;.
      URNs are used to uniquely indentify specific data sets such as a service
      description, an agency's/RMS's information about a person or an agency's/RMS's
      information about an event. An example of a URN indentifying a person in
      an RMS would be &quot;wenet:co.whatcom.wa.us/as400/person/johndoe&quot;.
      Each agency MUST be identified with a unique URN. Each service MUST be
      identified with a unique URN. Each unique data set, such as Person, Warrant,
      and Arrest data sets, from an RMS MUST be indentified with unique URNs.</p>
  </blockquote>
  <p>4. HTTP<a name="http" id="http"></a></p>
  <p>4.1 Secure HTTP<a name="securehttp" id="securehttp"></a></p>
  <blockquote>
    <p>Except for retrieving the service descriptor, clients and services MUST
      communicate via HTTP [<a href="http://www.ietf.org/rfc/rfc2616.txt">RFC
        2616</a>] over TLS [<a href="http://www.ietf.org/rfc/rfc2818.txt">RFC
        2818</a>] or SSL. Both services and clients MUST authenticate each other
        with valid and authorized digital certificates.  Services MUST present
        a digital certificate that matches one of the certificates listed in
        the service discriptor.
        Clients SHOULD verify server certificates against those listed in the
        discovery description. Services authenticate against each other using
        the certificates listed in their respective service discriptors.</p>
  </blockquote>
  <p>4.2 HTTP GET<a name="httpget" id="httpget"></a></p>
  <blockquote>
    <p>The methods exposed by services are accessed via the GET method
      of HTTP. As a simplistic description, the only parameter neccessary to
      make an HTTP GET request of a server is a URL. The service discovery discription
      provides a list of methods, their type, and their corresponding URL. In
      most cases,  additional parameters are required such a the name of a
      person to search for. In this case this protocol specifies a specific text
      string which MUST exist in the URL that is to be replaced with the appropriate
      parameter. In this way clients can, via simple string replacement and HTTP
      GET requests; retrieve results and documents from a service. All REQUIRED
      methods are implemented via HTTP GET.</p>
  </blockquote>
  <p>4.3 HTTP POST<a name="httppost" id="httppost"></a></p>
  <blockquote>
    <p>A few methods that allow for advanced inquiry require the use of the POST
      method of HTTP. As a simplistic description, a POST allows a stream of
      additional data to be attached to the request. The service discovery description
      provides a list of methods, their type, and their corresponding URL. For
      each method requiring POST this protocol specifies the stream content and
      format expected by the service method.</p>
  </blockquote>
  <p>4.4 HTTP Error Messages<a name="httperror" id="httperror"></a></p>
  <blockquote>
    <p>Whenever possible the service should respond with the most appropriate
      HTTP status code and should strive to extensively use status codes for
      error, missing or not found information. Specifically all clients SHOULD
      understand the following status codes: 200, 301, 305, 307, 400, 401, 404,
      408, 410, 414, 500, 501, and 503.</p>
  </blockquote>
  <p>4.5 Methods<a name="methods"></a></p>
  <blockquote>
    <p>This protocol defines 5 methods that a service MUST implement and one
      method that a service MAY implement. The first method is called &quot;discover&quot;
      and is accessed via HTTP GET and detailed in section <a href="#discovery">6</a>.
      The second method is called &quot;authlist&quot; and is accessed via HTTP
      GET and detailed in section <a href="#authorization">7.2</a>. The third
      method is called &quot;auditlog&quot; and is accessed via HTTP GET and
      detailed in section <a href="#auditing">7.3</a>. The fourth method is called
      &quot;query&quot; and is accessed via HTTP GET and is detailed in section <a href="#simple">8.1</a>.
      The fifth and last requeired method is called &quot;retrieval&quot; and
      is accessed via HTTP GET and is detailed in section <a href="document">8.2</a>.
      The one optional method is called &quot;complex query&quot; and is accessed
      via HTTP POST and is detailed in section <a href="#complex">8.3</a>.</p>
  </blockquote>
  <p>5. WENET Schema<a name="schema" id="schema"></a></p>
  <blockquote>
    <p>This protocol uses XML as the primary format for exchanging data and specifically
      for most returned data sets. A companion document [<a href="http://www.whatcomcounty.us/apps/wenet/schema-1_0.xsd">WENET
      Schema</a>] to this one defines the schema for top level XML types used
      by this protocol. For each request their is a corespoding type specified
      in the schema that is returned by the service as a complete and properly
      formatted XML document with HTTP contenty type text/xml. This document
      will indentify XML data types in italics with these custom types having
      the namespace prefix of <em>wenet</em>.</p>
  </blockquote>
  <p>6. Discovery<a name="discovery" id="discovery"></a></p>
  <blockquote>
    <p>Discovery allows for clients to discover and connect to all available
      services and for services to connect to each other.</p>
  </blockquote>
  <p>6.1 Clusters<a name="clusters"></a></p>
  <blockquote>
    <p>Agencies wishing to share data will group their clients, services and
      users together in clusters. Clusters allow different groups to form around
      different
      agency groups when their are differences in sharing agreements. Inittially
      the WENET project will only have one cluster, however additional clusters
      may be established for other groups or to establish a development cluster.
      Clients and services may belong to more then one cluster. While outside
      of the scope of this document, it is anticipated that all agencies within
      a single cluster will agree to a common agreement on security and GJXDML
      rules. A client will have at least one URL to a service descriptor for
      each cluster
      it
      belongs to and the client software may combine results from multiple clusters.
      Each service will include in its service descriptor the list of clusters
      it belongs to. An examble of a possible cluster configuration is with agencies
      A, B, C, D. Agencies A, B, C could be grouped in a cluster, while agencies
      B, C, D could be in another cluster. Users in agencies B and C can access
      both agencies A and D's data while users in agency A can not access data
      from agency D and vice versus.</p>
  </blockquote>
  <p>6.1.1 Service Hierarchy <a name="hierarchy" id="hierarchy"></a></p>
  <blockquote>
    <p>Within clusters, services MAY be organized into a hierarchy. This hierarchy
      allows for indexing services, proxies and other services in a priority
      fashion. Each service defines which, if any, service is its parent within
      a given cluster. Clients MUST first attempt queries against the services
      without parents and then move down the hierarchy until their request is
      met. A service that does not define a parent within a cluster is at the
      top of the hierarchy. Multiple services may exist at the same level in
    the hierarchy.</p>
  </blockquote>
  <p>6.2 <em>wenet:service</em><a name="service"></a></p>
  <blockquote>
    <p>Each service MUST provide via HTTP GET for the retrieval of a XML document
        of type <em>wenet:service</em>. The service discriptor contains information
        about the service such as contact information, disclaimers, method access
        URLs, and digital certificate ids.
      The service discriptor also contains a list of the clusters it belongs
        to and the services in those clusters. Thus client software SHOULD only
        need the URL of the local service discriptor in order to access all available
        services. As noted in <a href="#securehttp">section 4.1</a>, the service discriptor MUST be available
        without
        authenticating and should not contain privledged informaiton.</p>
  </blockquote>
  <p>7. Security<a name="security" id="security"></a></p>
  <blockquote>
    <p>Security in WENET is based on  trust relationships between
      seperate agencies. Agencies wishing to share data are expected to enter
      into contracts specifing the security relationship including definitions
      of the types of users that will access the data. Such contract specifics
    are outside the scope of this technical document.</p>
    <p>Services establish a trust relationship amongst each other so that they
      may directly query each other. As noted in <a href="#clusters">section
      6.1</a>, it is anticipated
      that agencies in trust relationships will be grouped together in clusters.</p>
    <p>Authorization lists are
        specified at the user level and define the groups a
      user belongs to. Since each agency is in the best position to
      know
        who of its users should have access to what type of data, it is expected
      but not required that authorization lists be provided by and maintained
      by each agency. The authorization
        lists contains all of the names and other indentifying information and
        what groups the agency says the users should be able
      to use. Since most existing RMS systems currently contain user data and
      to simplify distribution while easing maintainace, distribution of the
      access
      lists
      is provided by the services.</p>
  </blockquote>
  <p>7.1. Authentication<a name="authentication" id="authentication"></a></p>
  <blockquote>
    <p>Each service MUST provide in their service descriptor a list of digital
      certificates which are authorized by the service to sign user certificates
      for the users it represents. In this way the
       client authenticates, on behalf of the user, with a user digital certificate
      signed by an authorized certificate. The users digital certificate MUST
      contain the X.509 v3 extended attribute &quot;Subject Alternative Name&quot; which
      MUST contain the value &quot;RFC822 Name=username&quot; where username
      is an authorized username (see <a href="#authorization">Section 7.2</a>).
      The service authenticated against uses the username to determine if the
      user is authorized for to make the request and to log the request.</p>
  </blockquote>
  <p>7.2. Authorization<a name="authorization" id="authorization"></a></p>
  <blockquote>
    <p>Each service MUST provide via HTTP GET for the retrieval of a XML document
      of type <em>wenet:authlist</em> which contains the list of users that the
      service represents. The document contains a list of users and the groups
      the users is a member of. Each user is indentified by an e-mail style username.
      This username SHOULD be
      a valid e-mail address but
      at the
      least MUST be globaly unique. The username must match the username identified
      by the users digital certificate(s). Each service MUST from time to time
      contact the other services in the clusters it belongs
      to in
      order
      to retrieve
      the
      latest copies of authorization lists. The service MUST only
      allow other services to retrieve the list. This MUST be verified by matching
      the authenticating certificate with the one listed in the service descriptor
      of the requesting service.</p>
  </blockquote>
  <p>7.3. Auditing<a name="auditing" id="auditing"></a></p>
  <blockquote>
    <p>Each service MUST record the username, date, time,  request URL, and POST
      content, if any, of each request made. This record MUST be made available
      via HTTP GET as a
      XML
      document of type <em>wenet:auditlog</em>. </p>
  </blockquote>
  <p>8. Query</p>
  <blockquote>
    <p>The primary service of a function is to provide
      for quering of an agencies RMS system and retrieval of RMS data. Services
      make RMS data available in the form of XML documents of type <em>wenet:instance</em>.
      There are two way to provide query, one simple
      and
      mandatory
      and
      the other more complex but optional.</p>
  </blockquote>
  <p>8.1<em>wenet:instance</em><a name="instance" id="instance"></a></p>
  <blockquote>
    <p>Each service must profice via HTTP GET for the retrieval of a XML document
      of type <em>wenet:instance</em>. The document indentifies the type of data
      it contains, when the data was last updated in the RMS, the unique URI
      for the agency owning the the data, the unique URI of the service providing
      the data and a unique URI representing the data set itself. The body of
      the document contains a top level data type from the Global Justice XML
      Data Model v3.</p>
  </blockquote>
  <p>8.2<em>wenet:results <a name="results"></a></em></p>
  <blockquote>
    <p>The <em>wenet:results</em> document
      contains a collection of result elements. Each result element contains
      the agency URI, the service URI, the document URI, the date/time last updated
      and
      most importantly the URL that may be used to retrieve the document. If
      there were no matching results then the collection will be empty.</p>
    <p>If there were errors in processing the query, the <em>wenet:results</em> errorNumber
      attribute will be set to a integer greator then zero and the errorDescription
      will contian a user friendly error message. The list of valid errors is
      defined by restriction with enumeration in the schema. The list includes
      errors such as &quot;invalid XPath&quot; , &quot;insuficient rights&quot;, or &quot;XPath
      node not supported&quot;.</p>
  </blockquote>
  <p>8.3 Simple Query<a name="simple" id="simple"></a></p>
  <blockquote>
    <p>Each service MUST provide via HTTP GET for the retrieval of a
      XML document of type <em>wenet:results</em> which contains a list of documents
      which match the XPath query passed via the GET URL. <a href="TO%20DO">XPath
      v1.0</a> syntax SHALL
      be used to query the data sets made available by the service. The XPath
      statement is made against XML documents of type <em>wenet:instance</em> rooted
      at the <em>wenet:instance</em> level. For example, a XPath statement to
      query type person may look like &quot;/wenet:instance/jxdd3:Person/jxdd3:PersonName[jxdd3:PersonFullName='ANASKAN']&quot;.
      Or a XPath statement to retrieve any new docoments since a given date and
      time may look like &quot;/wenet:instance/[@lastModified='2004-03-08']&quot;. The
      service descriptor specifies a URL for this method. The URL is a standard
      URL except
      where
      the XPath
      statement should go the URL contains a string, either &quot;!xpath-norm!&quot; or
      &quot;!xpath-esc!&quot;. The client is to replace this string with the
      XPath query statement. If the string is &quot;!xpath-esc!&quot; then the
      XPath query MUST be escaped in proper URL format before inclusion in the
      URL, otherwise the
      XPath query may be directly substituted.</p>
    <p>The service MAY provide for specifing namespaces in the URL by providing
      in the URL string either &quot;!namespaces-norm!&quot; or &quot;!namespaces-esc!&quot;. Namespaces
      in the XPath query MUST be guesed at by the service if not provided. (TO
      DO, needs work)</p>
    <p>In this way the client may create an XPath statement, escape it if neccessary,
      substitute it into the URL, authenticate to the service using a valid digital
      certificate, make an HTTP GET request with the URL and retrieve a collection
    of results in the form of a <em>wenet:results</em> document. </p>
  </blockquote>
  <p>8.4 Complex Query<a name="complex" id="complex"></a></p>
  <blockquote>
    <p>Simple queries typically allow you to only query against one field. Clients
      can overcome this limitation by making multiple queries and joining the
      results approprietly on the client side. However to query against multiple
      field at the service level a more complex method of passing query arguments
      is
      required.
      A service
      MAY provide via HTTP POST for the posting of a XML document of type <em>wenet:query</em> with
      a response of XML document type <em>wenet:results</em>. The <em>wenet:query</em> document
      MUST be properly escaped and posted as field &quot;query&quot;. There are
      two complex query types.</p>
  </blockquote>
  <p>8.4.1 XPath joines <a name="xpath" id="xpath"></a></p>
  <blockquote>
    <p>XPath joines allows the specification of  one or more XPath query statements
      (as defined in <a href="#simple">section
        8.3</a>) combined with  AND/OR comparisons and appropriate nesting
    elements. The schema for XPath joines is specified in the WENET Schema. When
        passing a XPath join the <em>wenet:query</em>  MUST have the queryMethod
        set to &quot;XPath&quot;.</p>
  </blockquote>
  <p>8.4.2 XQuery <a name="xquery" id="xquery"></a></p>
  <blockquote>
    <p>(TO DO)	</p>
  </blockquote>
  <p>9. Change Log <a name="changelog" id="changelog"></a></p>
  <blockquote>
  <p>Changes made since initially published on October 30th of 2003.</p>
  <ol>
    <li>20040316 - Added XPath examples to 8.2.</li>
    <li>20040514 -
major changes     
      <ol>
        <li>Increased version number to 1.1</li>
        <li>spelling and grammer fixes</li>
        <li>fixed name of Justice XML dictionary to GJXDM</li>
        <li>added 404 and 414 HTTP error codes</li>
        <li>service parent/child relationship within a cluster</li>
        <li>removed inter-local agreement reference in cluster and replaced with
          just agreements</li>
        <li>created a section on wenet:results</li>
        <li>added error messages to the wenet:results decription to detail error
          messages</li>
        <li>added support for namespaces</li>
        <li>added better support for complex queries, including XQuery</li>
        <li>changed security model from method/document type to groups</li>
      </ol>
    </li>
    </ol>
  </blockquote>
<!-- Footer -->   
<a href="http://www.w3.org/WAI/WCAG1A-Conformance"
      title="Explanation of Level A Conformance">&nbsp;&nbsp;</a> 
   </body>
</html>

